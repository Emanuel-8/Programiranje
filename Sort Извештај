 Сортирање на низи

На час по програмирање имавме задача да искористиме неколку алгоритми за сортирање и да ги споредиме според тоа колку време им треба да сортираат низа со 100000 случајни броеви. Алгоритмите што ги користевме се: Insertion Sort, Selection Sort и Merge Sort.
Како ги генерирав бројките
За низата од 100000 елементи со случајни вредности. За тоа користев random_device, mt19937 и uniform_int_distribution во C++. Овие класи овозможуваат да се добијат случајни броеви од 1 до 100000, така што секој пат кога ќе ја пуштам програмата, низата изгледа различно.
Како го мерев времето
За мерење на времето користев библиотеката chrono. На почетокот пред сортирање ја повикав функцијата high_resolution_clock::now(), а истото го направив и на крајот после сортирањето. Разликата од тие два момента ја претворив во милисекунди со duration_cast<milliseconds>, и така добив точно колку време му требало на секој алгоритам.

Јас користев компјутер со I5-14th gen i 32gb ram и ова се добиените времиња.

•	Insertion Sort (O(n²))– еден по еден елемент го става на вистинското место. Добар е за мали низи, ама многу бавен за големи. Средно време(16,3641)
•	Selection Sort (O(n²))– секогаш го бара најмалиот елемент и го става на почеток. Исто е бавен за големи низи. Средно време(18,4366)
•	Merge Sort(O(n log n)) – ја дели низата на помали делови и после ги спојува во правилен ред. Многу побрз е од првите два. Средно време(1,66184) 
•	Quick Sort(O(n log n)) – избира еден елемент како “pivot“ и ја дели низата на помали и поголеми. Многу ефикасен е за големи низи.Средно време(1,6047)

